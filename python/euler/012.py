import random

print """
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

# Take a value and return the number of divisors
def checkDivisors(number):
	result = [1, number]
	x = number - 1
	while x > 1:
		if number % x == 0:
			result.append(x)
		x -= 1
	#result.sort()
	return len(result)

# Find the nth triangle number
def getTriangleNumber(number):
	result = 0
	x = 0
	while x <= number:
		result += x
		x += 1
	return result

# pick a random starting point
# if divisors are over 500, go lower
# if divisors are under 500, go higher
# make smaller jumps each time

number = random.randint(1,1000000)
number = 7

triangleNumber = getTriangleNumber(number)

print number, getTriangleNumber(number), checkDivisors(triangleNumber)

# The slow method

lastCheck = 0

while lastCheck <= 500:
	number += 1
	tn = getTriangleNumber(number)
	lastCheck = checkDivisors(tn)
	print number, tn, lastCheck